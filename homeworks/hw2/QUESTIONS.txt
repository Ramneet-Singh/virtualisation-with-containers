                           ______________________

                            COV 882 HW2 QUESTIONS
                           ______________________


Write your answers to the questions below directly in this text file.


PROBLEM 1 `setuids'
=========================

A. Assume in each of the following cases that the initial set of process user IDs is real=1000 effective=0 saved=0. What would be the state of the user IDs after the following calls? Each call is independent of each other.

a) setuid(1000); setuid(0);

After setuid(1000):
    real=1000 effective=1000 saved=1000

After setuid(0):
    real=1000 effective=1000 saved=1000

setuid(0) will return -1 indicating an error since once all the user ids are set to non-privileged ones, you cannot become root again.

b) seteuid(1000); setuid(0);

After seteuid(1000):
    real=1000 effective=1000 saved=0

After setuid(0):
    real=1000 effective=0 saved=0

c) seteuid(2000); setuid(1000);

After seteuid(2000):
    real=1000 effective=2000 saved=0

After setuid(1000):
    real=1000 effective=1000 saved=0

d) seteuid(600); setuid(1000); setuid(0);

After seteuid(600):
    real=1000 effective=600 saved=0

After setuid(1000):
    real=1000 effective=1000 saved=0

After setuid(0):
    real=1000 effective=0 saved=0

B. Review the difference between system() and execve().

ANSWER:

The way system(command) works is by forking a new process, execing the "/bin/sh" program in that process and letting it execute command. Precisely, the forked process executes "/bin/sh -c command". system() then also waits for the child to finish and returns. On the other hand, execve(pathname,argv,envp) replaces the current process image with a new process image, whose executable is specified by pathname, arguments are given by argv and environment is given by envp.

Anita uses the Z shell /bin/zsh on her system instead of the bash shell.

Anita also works for an auditing agency, and she needs to investigate a company for a suspected fraud. For the investigation purpose, Anita needs to be able to read all the files in the company’s
Unix system; on the other hand, to protect the integrity of the system, Anita should not be able to
modify any file. To achieve this goal, Balu, the superuser of the system, wrote a special set-root-uid
program (see 'setuid-cat.c'), and then gave the executable permission to Anita. This program requires Anita to
type a file name at the command line, and then it will run /bin/cat to display the specified file.


(a) If q = 0 in the program, the program will use system() to invoke the command.
Is this program safe? Can Anita compromise the integrity of the system? For
example, can Anita remove any file that is not writable to her?

ANSWER:

Since the system() call uses /bin/sh (which links to zsh) to execute the command (and with root privileges, since setuid-cat.c is a set-root-uid program), Anita can provide malicious arguments to ./setuid-cat to remove files which are not writable to her. Notice that command is given by "\bin\cat argv[1]". So Anita can set argv[1]="file; rm file", i.e., she can run './setuid-cat "file; rm file"'. Then, the zsh shell will run the command "/bin/cat file; rm file" with root privileges, meaning that it will execute "/bin/cat file" first and then "rm file". This leads to the file being removed.

(b) If q = 1 in the program, the program will use execve() to invoke the command.
Do your attacks in task (a) still work? Please describe and explain your observations.

The attack in task (a) will not work, because execve() does not execute the shell /bin/sh. Instead, it directly executes the /bin/cat program giving it the argument argv[1]. So if we set argv[1]="file; rm file", "/bin/cat file;rm file" will be run directly with root privileges, and the cat program will complain that there is no file named "file; rm file".

C. To be more secure, Set-UID programs usually call setuid() system call to permanently relinquish their root privileges. However, sometimes, this is not enough. Compile the program 'relinquish.c', and make the program a set-root-uid program. Run it in a normal user account, and describe what you
have observed. Will the file /etc/banal be modified? Please explain your observation.

Yes, the file /etc/banal will be modified. This is because the program does not close the file descriptor (which has opened a privileged file) before relinquishing its privilege and transferring control to malicious code. Permissions for opening a file are only checked when open() is called. After that, even if you relinquish privilege, the fact that you have a valid file descriptor is enough to enable you to read/write from that file. Since the malicious code has a valid file descriptor fd pointing to /etc/banal, it can write to that file.

PROBLEM 2 `chroot'
=======================


A. chroot functionality

Run the commands to do the following:
(i)	Create a new directory named “new-root”.
(ii)	Determine all dependencies for bash and copy them under “new-root”.
(iii)	chroot to “new-root”. Show that the command bash works by calling bash.
(iv)	Check if `cd', `cd .' , `pwd', and `less' can be run in this bash.
You must submit a shell script with the commands used in (i)-(iv).
Answer the following: Which of the commands in (iv) ran and why?

ANSWER:

See file `q2a.sh`.

The commands `cd .` and `pwd` ran without error. This is because . is a directory entry in the "new-root" directory, and `cd`,`pwd` are built-in commands within bash rather than separate programs which are exec'd by bash. The command `cd` defaulted to `cd /root`, and since there is no directory entry named "root" inside "new-root", the command printed an error saying "there is no such file or directory". The `less` command didn't run, because bash couldn't find the executable for `less` inside the new paths (PATH variable remains the same but the paths are now interpreted with respect to the new root directory, i.e., "new-root").

B. Breaking the jail.

Write a program to break the jail. The program must do the following steps in order:
1.	chroot into the “new-root” directory.
2.	chdir into a relative path outside the jail, such as “../../../”
3.	chroot to the current directory,
4.	exec /bin/bash -i
Submit your program. Answer the following: Were you able to break out of the jail?

Note: chroot is listed in <unistd.h>

ANSWER:

See file `q2b.c`.

Yes, I was able to break out of the jail. After changing the root directory, I did chdir("..") for 1000 number of times. 1000 was just to be sure that I reach the actual root, it is an upper bound on the safe side. Doing chdir("..") in the root directory has no effect therefore even if the actual root is reached in 3 chdir("..") calls, the program remains correct. Then, I called chroot("."), effectively breaking out of the jail. The proof of this is that I was able to exec /bin/bash even after deleting all the contents of the "new-root" directory.

PROBLEM 3 Capabilities
======================

A. Modify the program `sched-set.c' to use file capabilities, so that it can be used by an unprivileged user.

ANSWER:

The program `sched-set.c` given to us actually has a bug (see https://man7.org/tlpi/errata/index.html#p_743). I have used the updated code from the distribution version instead. Before making the call to sched_setscheduler(), I raise the CAP_SYS_NICE capability in the effective set. And after all calls have been made, since the program has nothing else left to do, I drop all capabilities.

See folder `q3`. To compile the file, run `gcc sched-set.c get_num.c error_functions.c -I . -lcap -o sched-set` (make sure libcap-dev is installed). Then add `CAP_SYS_NICE` to the file's permitted capabilities set by running `sudo setcap "cap_sys_nice=p" sched-set`. Now an unprivileged user can run the program as `./sched-set policy priority [pid...]`.
